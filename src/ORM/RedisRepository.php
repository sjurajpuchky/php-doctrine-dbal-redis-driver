<?php /** @noinspection SpellCheckingInspection */

namespace BABA\Doctrine\ORM;

use Doctrine\Common\Collections\Criteria;
use Doctrine\ORM\EntityManagerInterface;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Mapping;

class RedisRepository extends EntityRepository
{
    public function __construct(EntityManagerInterface $em, Mapping\ClassMetadata $class)
    {
        parent::__construct($em, $class);
    }

    public function createQueryBuilder($alias, $indexBy = null)
    {
        return parent::createQueryBuilder($alias, $indexBy); // TODO: Change the autogenerated stub
    }

    public function createResultSetMappingBuilder($alias)
    {
        return parent::createResultSetMappingBuilder($alias); // TODO: Change the autogenerated stub
    }

    public function createNamedQuery($queryName)
    {
        return parent::createNamedQuery($queryName); // TODO: Change the autogenerated stub
    }

    public function createNativeNamedQuery($queryName)
    {
        return parent::createNativeNamedQuery($queryName); // TODO: Change the autogenerated stub
    }

    public function clear()
    {
        parent::clear(); // TODO: Change the autogenerated stub
    }

    public function find($id, $lockMode = null, $lockVersion = null)
    {
        return parent::find($id, $lockMode, $lockVersion); // TODO: Change the autogenerated stub
    }

    public function findAll()
    {
        return parent::findAll(); // TODO: Change the autogenerated stub
    }

    public function findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
    {
        return parent::findBy($criteria, $orderBy, $limit, $offset); // TODO: Change the autogenerated stub
    }

    public function findOneBy(array $criteria, array $orderBy = null)
    {
        return parent::findOneBy($criteria, $orderBy); // TODO: Change the autogenerated stub
    }

    public function count(array $criteria)
    {
        return parent::count($criteria); // TODO: Change the autogenerated stub
    }

    public function __call($method, $arguments)
    {
        return parent::__call($method, $arguments); // TODO: Change the autogenerated stub
    }

    protected function getEntityName()
    {
        return parent::getEntityName(); // TODO: Change the autogenerated stub
    }

    public function getClassName()
    {
        return parent::getClassName(); // TODO: Change the autogenerated stub
    }

    protected function getEntityManager()
    {
        return parent::getEntityManager(); // TODO: Change the autogenerated stub
    }

    protected function getClassMetadata()
    {
        return parent::getClassMetadata(); // TODO: Change the autogenerated stub
    }

    public function matching(Criteria $criteria)
    {
        return parent::matching($criteria); // TODO: Change the autogenerated stub
    }

}